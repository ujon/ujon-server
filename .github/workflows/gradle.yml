name: Java CI with Gradle

on:
  push:
    tags:
      - 'release*'

env:
  api_image_name: ghcr.io/${{github.repository}}/api:${{github.ref_name}}-${GITHUB_SHA::6}

jobs:
  config:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check all variables
        run: |
          echo "github.repository: ${{github.repository}}"
          echo "github.repository_owner: ${{github.repository_owner}}"
          echo "github.sha: ${{github.sha}}"
          echo "github.ref_name: ${{github.ref_name}}"
          echo "secrets.GHCR_TOKEN: ${{secrets.GHCR_TOKEN}}"
          echo "env.api_image_name: ${{env.api_image_name}}"

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle Wrapper
        run: ./gradlew :ujon-api:build

      - name: Build jar
        if: success()
        run: ./gradlew :ujon-api:bootJar

      - name: Upload jar as artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ujon-api-jar
          path: |
            ujon-api/build/libs/
            ujon-api/Dockerfile



  packaging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build
    steps:
      - name: Download jar artifact
        uses: actions/download-artifact@v4
        with:
          name: ujon-api-jar
          path: ujon-api/

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: docker build -f ./ujon-api/Dockerfile -t ${{env.api_image_name}} .

      - name: Push Docker image to GitHub Container Registry
        run: docker push ${{env.api_image_name}}


