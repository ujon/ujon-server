package io.ujon.application.authimport io.ujon.application.auth.dto.input.SignInInputimport io.ujon.application.auth.dto.input.SignUpInputimport io.ujon.application.auth.dto.output.AuthorityOutputimport io.ujon.application.auth.dto.output.ClaimsOutputimport io.ujon.application.auth.helper.JwtHelperimport io.ujon.application.auth.mapper.AuthFacadeMapperimport io.ujon.application.auth.type.AuthTokenTypeimport io.ujon.common.exception.CommonExceptionimport io.ujon.common.exception.ResponseTypeimport io.ujon.domain.user.UserServiceimport io.ujon.domain.user.dto.operation.RetrieveUserOperationimport org.springframework.security.crypto.password.PasswordEncoderimport org.springframework.stereotype.Component@Componentclass AuthFacadeImpl(    // service    private val userService: UserService,    // mapper    private val authMapper: AuthFacadeMapper,    // helper    private val jwtHelper: JwtHelper,    private val passwordEncoder: PasswordEncoder,) : AuthFacade {    override fun signUp(input: SignUpInput.Email): AuthorityOutput {        val encodedPassword = passwordEncoder.encode(input.password)        val operation = authMapper.toRegisterUserOperationEmail(input, encodedPassword)        val info = userService.registerUser(operation)        return jwtHelper.authority(info.username)    }    override fun signIn(input: SignInInput.Email): AuthorityOutput {        val operation = authMapper.toRetrieveUserSecretOperation(input)        val info = userService.retrieveUserSecret(operation)        if (!passwordEncoder.matches(input.password, info.password)) {            throw CommonException(ResponseType.INVALID_PASSWORD)        }        return jwtHelper.authority(info.username)    }    override fun refresh(token: String): AuthorityOutput {        val claims = jwtHelper.validate(token, AuthTokenType.REFRESH_TOKEN)        val operation = RetrieveUserOperation(            username = claims.username        )        val info = userService.retrieveUser(operation)        return jwtHelper.authority(info.username)    }    override fun verifyToken(accessToken: String): ClaimsOutput {        return jwtHelper.validate(accessToken, AuthTokenType.ACCESS_TOKEN)    }}