package io.ujon.application.authimport io.ujon.application.auth.dto.input.SignInInputimport io.ujon.application.auth.dto.input.SignUpInputimport io.ujon.application.auth.dto.output.AuthorityOutputimport io.ujon.application.auth.dto.output.ClaimsOutputimport io.ujon.application.auth.helper.JwtHelperimport io.ujon.application.auth.mapper.AuthFacadeMapperimport io.ujon.application.auth.type.AuthTokenTypeimport io.ujon.domain.user.UserServiceimport org.springframework.stereotype.Component@Componentclass AuthFacadeImpl(    // service    private val userService: UserService,    // mapper    private val authMapper: AuthFacadeMapper,    // helper    private val jwtHelper: JwtHelper,) : AuthFacade {    override fun signUp(input: SignUpInput.Email): AuthorityOutput {        val operation = authMapper.toRegisterUserOperationEmail(input)        val info = userService.registerUser(operation)        return jwtHelper.authority(info.username)    }    override fun signIn(input: SignInInput.Email): AuthorityOutput {        val userInfo = userService.verify(input.email, input.password)        return jwtHelper.authority(userInfo.username)    }    override fun signInPasscode(passcode: String): AuthorityOutput {        val userInfo = userService.verify(passcode)        return jwtHelper.authority(userInfo.username)    }    override fun refresh(token: String): AuthorityOutput {        val claims = jwtHelper.validate(token, AuthTokenType.REFRESH_TOKEN)        val userInfo = userService.retrieve(claims.username)        return jwtHelper.authority(userInfo.username)    }    override fun verifyToken(accessToken: String): ClaimsOutput {        return jwtHelper.validate(accessToken, AuthTokenType.ACCESS_TOKEN)    }}